/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_next_line.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: anasser- <marvin@42.fr>                    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/06/24 17:22:53 by anasser-          #+#    #+#             */
/*   Updated: 2024/06/24 17:22:56 by anasser-         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "get_next_line.h"

char	*ft_strdup(const char *str)
{
	char	*dest;
	int		len;
	int		j;

	j = 0;
	len = ft_strlen(str);
	dest = (char *) malloc((len + 1) * sizeof(char));
	if (!dest)
		return (0);
	while (j < len)
	{
		dest[j] = str[j];
		j++;
	}
	dest[j] = '\0';
	return (dest);
}

size_t	ft_strlen(const char *c)
{
	if (*c == '\0')
		return (0);
	return (1 + ft_strlen(c + 1));
}

size_t	ft_strlcpy(char *dst, const char *src, size_t dstsize)
{
	size_t	i;

	i = 0;
	if (dstsize > 0)
	{
		while (src[i] && i < dstsize - 1)
		{
			dst[i] = src[i];
			i++;
		}
		dst[i] = '\0';
	}
	while (src[i])
		i++;
	return (i);
}

char	*get_next_line(int fd)
{
	static char	*s = NULL;
	int			eof;

	if (fd < 0 || BUFFER_SIZE <= 0)
		return (0);
	if (!s)
	{
		s = malloc((BUFFER_SIZE + 1) * sizeof(char));
		if (!s)
			return (0);
		eof = read(fd, s, BUFFER_SIZE);
		if (eof <= 0)
		{
			free(s);
			s = (0);
			return (0);
		}
		s[eof] = '\0';
	}
	return (ft_split_f(&s, &eof, fd));
}
